# makefile.mcl
#
# Library makefile to make running MCL simpler.
#
# Include the full path of this file in your Makefile ...
#
# Author: daniel.lundin@dbb.su.se

SHELL := /bin/bash

# *** Parameters ***

# Override in your Makefile by setting a parameter *after* the row that
# includes this file, see documentation in doc/makefile.md.
#
MCL_OPTS =

# *** Internal ***

# MAKECALLMCL is a macro that defines what will be output to the .makecall
# file, the file that records versions, file stamps, parameters etc.
#
# *Don't redefine!*
MAKECALL_MCL_VERSION = echo "`date +"%Y%m%d %H:%M:%S"`: $@ was made with `MCL --version`" > $@.makecall
MAKECALL_MCL_PARAMS  = echo "	Called with parameters: $(MCL_OPTS)" >> $@.makecall
MAKECALL_MCL_INFILES = echo "	Input files: $^ (`ls -lL $^|tr '\n' ','`)" >> $@.makecall
MAKECALL_MCL         = $(MAKECALL_MCL_VERSION); $(MAKECALL_MCL_PARAMS); $(MAKECALL_MCL_INFILES)

# *** Targets ***

# File conversions

# abc.tsv files can (perhaps) be made with blast2matrix!

%.bitscore.abc.tsv: %.megantab.gz
	gunzip -c $< | cut -f 1,2,12 > $@

# MCL clustering
%.mci: %.abc.tsv.gz
	mcxload -abc <(gunzip -c $<) --stream-mirror -write-tab $(basename $@).mcldata -o $@

%.mci: %.abc.tsv
	mcxload -abc $< --stream-mirror -write-tab $(basename $@).mcldata -o $@

.SECONDARY:

# This doesn't work...
%.mcls: %.mcl1_2.mclout %.mcl1_4.mclout %.mcl2.mclout %.mcl2_5.mclout %.mcl4.mclout %.mcl6.mclout

all_mcxdumps: $(subst .mclout,.mcxdump.tsv,$(wildcard *.mclout))

%.mcl1_1.mclout: %.mci
	mcl $< -I 1.1 -o $@

%.mcl1_2.mclout: %.mci
	mcl $< -I 1.2 -o $@

%.mcl1_4.mclout: %.mci
	mcl $< -I 1.4 -o $@

%.mcl1_6.mclout: %.mci
	mcl $< -I 1.4 -o $@

%.mcl1_8.mclout: %.mci
	mcl $< -I 1.4 -o $@

%.mcl2.mclout: %.mci
	mcl $< -I 2 -o $@

%.mcl2_5.mclout: %.mci
	mcl $< -I 2.5 -o $@

%.mcl4.mclout: %.mci
	mcl $< -I 4 -o $@

%.mcl6.mclout: %.mci
	mcl $< -I 6 -o $@

%.mcxdump.tsv: %.mclout
	mcxdump -icl $< -tabr $(basename $(basename $<)).mcldata -o $@

all_R.tsv.gz: $(subst mcxdump.tsv,R.tsv.gz,$(wildcard *.mcxdump.tsv))
	echo "inflation	cluster	item" > $(basename $@)
	for f in $^; do \
	  c=$$(echo $$f | grep -o "mcl[0-9_]*"|sed 's/mcl//'|sed 's/_/./'); \
	  gunzip -c $$f | sed "s/^/$$c\t/" >> $(basename $@); \
	done
	gzip -f $(basename $@)

%.R.tsv.gz: %.mcxdump.tsv
	sed 's/\t/:::/g' $< | sed 's/ /<space>/g' > $(basename $@).tmp
	i=0; for l in `cat $(basename $@).tmp`; do printf "Cluster%04d\t%s\n" $$i `echo $$l | sed 's/\t/:::/g'`; i=`expr $$i + 1`; done > $(basename $@)
	while [ `grep -c ':::' $(basename $@)` -gt 0 ]; do \
	  sed -i 's/\(.*\)\t\(.*\):::\(.*\)/\1\t\2\n\1\t\3/' $(basename $@); \
	done
	sed -i 's/<space>/ /g' $(basename $@)
	sed -i '/^$$/d' $(basename $@)
	gzip -f $(basename $@)
	rm $(basename $@).tmp
	
# Calculate *similarity* matrices from (pairwise, i.e. "xwise") LAST output,
# that can be loaded into Cytoscape.
%.bitscore.abc.tsv: %.blasttab.gz
	gunzip -c $< | cut -f 1,2,12 > $@

%.bitscore.abc.tsv.gz: %.blasttab.gz
	gunzip -c $< | cut -f 1,2,12 | gzip -c > $@

%.bitscore.abc.tsv: %.megantab.gz
	gunzip -c $< | cut -f 1,2,12 > $@

%.bitscore.abc.tsv.gz: %.megantab.gz
	gunzip -c $< | cut -f 1,2,12 | gzip -c > $@

# Create files for use in Cytoscape
R2ABC = echo "q	t	bitscore" > $@; \
	echo /dev/null > $@.patterns; \
	for c in $$(gunzip -c $< | cut -f 1 | sort -u); do \
	    for a in $$(zgrep $${c} $< | cut -f 2); do \
	        for b in $$(zgrep $${c} $< | cut -f 2 | grep -v $${a}); do \
		    echo "$${a}	$${b}" >> $@.patterns; \
		done; \
	    done; \
	done; \
	split -a 4 -l 10000 $@.patterns /tmp/$@.patterns.; \
	for f in /tmp/$@.patterns.*; do \
	    zgrep -f $$f $(word 2,$^) >> $@; \
	done; \
	rm $@.patterns

all_abc_tsvs: $(subst .R.tsv.gz,.abc.tsv,$(wildcard *.R.tsv.gz))

%.mcl1_1.abc.tsv: %.mcl1_1.R.tsv.gz %.abc.tsv.gz
	$(R2ABC)

%.mcl1_2.abc.tsv: %.mcl1_2.R.tsv.gz %.abc.tsv.gz
	$(R2ABC)

%.mcl1_4.abc.tsv: %.mcl1_4.R.tsv.gz %.abc.tsv.gz
	$(R2ABC)

%.mcl1_6.abc.tsv: %.mcl1_6.R.tsv.gz %.abc.tsv.gz
	$(R2ABC)

%.mcl1_8.abc.tsv: %.mcl1_8.R.tsv.gz %.abc.tsv.gz
	$(R2ABC)

%.mcl2.abc.tsv: %.mcl2.R.tsv.gz %.abc.tsv.gz
	$(R2ABC)

%.mcl2_5.abc.tsv: %.mcl2_5.R.tsv.gz %.abc.tsv.gz
	$(R2ABC)

%.mcl4.abc.tsv: %.mcl4.R.tsv.gz %.abc.tsv.gz
	$(R2ABC)

%.mcl6.abc.tsv: %.mcl6.R.tsv.gz %.abc.tsv.gz
	$(R2ABC)

# Subset input files
%.minbit025.bitscore.abc.tsv.gz: %.bitscore.abc.tsv.gz
	gunzip -c $< | awk '{ if ( $$3 >= 25 )  { print $$0 } }' | gzip -c > $@

%.minbit050.bitscore.abc.tsv.gz: %.bitscore.abc.tsv.gz
	gunzip -c $< | awk '{ if ( $$3 >= 50 )  { print $$0 } }' | gzip -c > $@

%.minbit075.bitscore.abc.tsv.gz: %.bitscore.abc.tsv.gz
	gunzip -c $< | awk '{ if ( $$3 >= 75 )  { print $$0 } }' | gzip -c > $@

%.minbit100.bitscore.abc.tsv.gz: %.bitscore.abc.tsv.gz
	gunzip -c $< | awk '{ if ( $$3 >= 100 ) { print $$0 } }' | gzip -c > $@

%.minbit125.bitscore.abc.tsv.gz: %.bitscore.abc.tsv.gz
	gunzip -c $< | awk '{ if ( $$3 >= 125 ) { print $$0 } }' | gzip -c > $@

%.minbit150.bitscore.abc.tsv.gz: %.bitscore.abc.tsv.gz
	gunzip -c $< | awk '{ if ( $$3 >= 150 ) { print $$0 } }' | gzip -c > $@

%.minbit160.bitscore.abc.tsv.gz: %.bitscore.abc.tsv.gz
	gunzip -c $< | awk '{ if ( $$3 >= 160 ) { print $$0 } }' | gzip -c > $@

%.minbit170.bitscore.abc.tsv.gz: %.bitscore.abc.tsv.gz
	gunzip -c $< | awk '{ if ( $$3 >= 170 ) { print $$0 } }' | gzip -c > $@

%.minbit180.bitscore.abc.tsv.gz: %.bitscore.abc.tsv.gz
	gunzip -c $< | awk '{ if ( $$3 >= 180 ) { print $$0 } }' | gzip -c > $@

%.minbit200.bitscore.abc.tsv.gz: %.bitscore.abc.tsv.gz
	gunzip -c $< | awk '{ if ( $$3 >= 200 ) { print $$0 } }' | gzip -c > $@
